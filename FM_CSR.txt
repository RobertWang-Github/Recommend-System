from itertools import count 
from collections import defaultdict
from scipy.sparse import csr    
from __future__ import print_function 

def vectorize_dic(dic, ix=None, p=None):
    """ 
    Creates a scipy csr matrix from a list of lists (each inner list is a set of values corresponding to a feature) 
    
    parameters:
    -----------
    dic -- dictionary of feature lists. Keys are the name of features    eg:{"users":train.user.values,"items":train.item.values}
    ix -- index generator (default None)
    p -- dimension of featrure space (number of columns in the sparse matrix) (default None)
    """
    if (ix == None):
        d = count(0)
        ix = defaultdict(lambda: next(d)) # 利用迭代器设置defaultdict的默认值，不同的key会相继增加默认值，而已经有的key则不会
        
	#dic 的keys为 user_id、movie_id、score、time	
    n = len(list(dic.values())[0]) # num samples    list(dict.values())[0]  返回user_id的list，因为是包含所有样本，所以user_id有重复  movie_id和score也是同样情况
    g = len(list(dic.keys())) # num groups   拿到keys数 此处应该是2,3或者4(如果包含score和time)  不妨假设为2  user_id and movie_id
    nz = n * g # number of non-zeros   非0元数

    col_ix = np.empty(nz, dtype=int)   # 一个nz长的空向量
    
    i = 0 
    for k, lis in dic.items(): # user_id:[...]  movie_id:[...]
        # append index el with k in order to prevet mapping different columns with same id to same index
        col_ix[i::g] = [ix[str(el) + str(k)] for el in lis]  
		# [ix[str(el) + str(k)] for el in lis]    给user_id打上标号从0开始    其中：str(el) + str(k)为 user_id具体取值加“user_id”  
		# 结果存入col_ix  步长为g 是因为最后col_ix的格式为 [user_id1对应的ix值,movie_id1对应的ix值,...,user_id2同前,movie_id2同前,...]    eg: [0,13,0,14,1,14...]
        i += 1 #索引+1 进入movie_id 或者其他
        
    row_ix = np.repeat(np.arange(0, n), g)  # 样本数重复g次  [user_ids,movie_ids,...]
    data = np.ones(nz) # data值都为1？
    
    if (p == None):
        p = len(ix) # 不重复的user_id、movie_id总数
        
    ixx = np.where(col_ix < p) # col_ix<p 的所有位置  假如用户、电影编号结束后，电影最多为1...p个   <p说不通啊  最大值应该是用户数+电影数啊？   p就是不重复的user_id、movie_id总数 
	# 其实<p的这个约束基本没用
    return csr.csr_matrix((data[ixx],(row_ix[ixx], col_ix[ixx])), shape=(n, p)), ix    # n行p列    
	#csr_matrix(data,(row_ind,col_ind),shape=(M,N))  a[row_ind[k],col_ind[k]] = data[k]
	#row_ix [0,0,1,1,2,2,3,3,...]   i对应第i个样本   0(row_ix[0]),0(row_ix[1]) 表示第0个样本的第一个特征(user_id)和第二个特征(movie_id)，即矩阵的第0行有两个位置为1(列为col_ix[0],col_ix[1])
	#col_ix根据ix[key]可以拿到不同的标号，分别对应不重复的user_id和movie_id 所以列数为p
	#如此一来，每行都对应一个user_id和movie_id对
	#返回ix可以根据标号拿到原始值和特征
	
	
	
